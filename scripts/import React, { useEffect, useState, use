// const Deposit = () => {
//   const { contract, Account, Balance, setBalance } = useContext(DbankContext);
//   const [deposits, setDeposits] = useState([]);
//   const [successfulltransaction, setsuccessfulltransaction] = useState();

//   const [name, setName] = useState("");
//   const [amount, setAmmount] = useState(0);

//   // const contractAddress = "0x4b631E0b2d9b86e45b71e7A0a7C59983A25F502e";

//   //getall deposit
//   useEffect(() => {
//     async function getalldepostis() {
//       if (!contract) {
//         toast.warning("Connect Your wallet");
//         return;
//       } else {
//         try {
//           const alldeposits = await contract.getAllDepositss();
//           const parseDeposits = alldeposits.map((deposit) => ({
//             amount: ethers.formatEther(deposit.amount),
//             name: deposit.name,
//             depositTime: new Date(
//               Number(deposit.depositTime) * 1000
//             ).toLocaleString("en-US", {
//               year: "numeric",
//               month: "short",
//               day: "numeric",
//               hour: "2-digit",
//               minute: "2-digit",
//               second: "2-digit",
//               hour12: false, // Use 24-hour format; set to true for 12-hour with AM/PM
//             }),
//           }));
//           console.log(parseDeposits);
//           setDeposits(parseDeposits);
//         } catch (error) {
//           console.log(error.message);
//         }
//       }
//     }
//     getalldepostis();
//   }, [contract, Balance, successfulltransaction]);

//   //deposit moneyu
//   async function DepostMoney() {
//     if (!contract) {
//       toast.warning("pleaser connect ur accont first");
//     } else {
//       try {
//         if (name && amount) {
//           const tx = await contract.DepositMoney(name, {
//             value: ethers.parseEther(amount.toString()),
//           });
//           const receipt = await tx.wait();
//           // event DepositMade(address indexed user, uint256 amount, string name);

//           contract.on("DepositMade", (Account, amount, name) => {
//             toast.success(`Deposit made of ${amount} from ${Account},`);
//           });

//           toast.success("Deposit Made successfully");
//           const balance = await contract.checkBalance();
//           setBalance(ethers.formatEther(balance));
//           setsuccessfulltransaction((e) => e + 1);
//           // console.log(receipt);
//         } else {
//           toast.error("please enter both values");
//         }
//       } catch (error) {
//         // toast.error(error.message);
//         let message = "An error occurred during the transaction.";
//         if (error.reason) {
//           message = error.reason; // Get revert reason if available
//         } else if (error.message) {
//           const matched = error.message.match(
//             /reverted with reason string '(.*)'/
//           );
//           if (matched) {
//             message = matched[1]; // Capture the specific revert reason
//           } else {
//             message = error.message; // Show general error message
//           }
//         }

//         toast.error(
//           `Transaction failed: ${message} > deposit must be >0.01 eth`
//         );
//       }
//     }
//   }
